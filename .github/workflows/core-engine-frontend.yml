# Documentation: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsuses
name: core_engine_frontend_github_workflow
run-name: Core Engine Frontend GitHub Workflow

env:
  ## Development environment variables
  # The URL of the Core Engine (HTTP)
  DEV_BACKEND_URL: ${{ vars.DEV_BACKEND_URL }}
  # The URL of the Core Engine (WebSockets)
  DEV_BACKEND_WS_URL: ${{ vars.DEV_BACKEND_WS_URL }}
  # The Kubernetes namespace that the service should be deployed to
  DEV_NAMESPACE: ${{ vars.DEV_NAMESPACE }}
  # Kube configuration
  DEV_KUBE_CONFIG: ${{ secrets.DEV_KUBE_CONFIG }}

  ## Production environment variables
  # The URL of the Core Engine (HTTP)
  PROD_BACKEND_URL: ${{ vars.PROD_BACKEND_URL }}
  # The URL of the Core Engine (WebSockets)
  PROD_BACKEND_WS_URL: ${{ vars.PROD_BACKEND_WS_URL }}
  # The Kubernetes namespace that the service should be deployed to
  PROD_NAMESPACE: ${{ vars.PROD_NAMESPACE }}
  # Kube configuration
  PROD_KUBE_CONFIG: ${{ secrets.PROD_KUBE_CONFIG }}

# Allow one concurrent deployment
concurrency:
  group: "core-engine-frontend"
  cancel-in-progress: true

on:
  push:
    branches:
      - main
      - prod
    paths:
      - .github/workflows/core-engine-frontend.yml
      - frontend/**/*

  pull_request:
    paths:
      - .github/workflows/core-engine-backend.yml
      - backend/**/*

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  run-workflow-dev:
    runs-on: ubuntu-latest
    if: ${{ vars.RUN_CICD == 'true' }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Set up Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Build app
        working-directory: frontend
        env:
          REACT_APP_ENGINE_URL: ${{ env.DEV_BACKEND_URL }}
          REACT_APP_ENGINE_WS_URL: ${{ env.DEV_BACKEND_WS_URL }}
          # So it does not treat warnings as errors
          CI: false
        run: npm run build

      - name: Build and push Docker image to GitHub
        id: build-and-push-docker-image-to-github
        if: ${{ vars.RUN_CICD == 'true' && success() && github.ref == 'refs/heads/main' && vars.DEPLOY_DEV == 'true' }}
        uses: swiss-ai-center/common-code/.github/actions/build-and-push-docker-image-to-github@main
        with:
          docker-registry-username: ${{ github.actor }}
          docker-registry-password: ${{ secrets.GITHUB_TOKEN }}
          docker-image-name: ${{ github.repository }}-frontend-dev
          docker-image-context: ./frontend

      - name: Prepare configuration files
        if: ${{ vars.RUN_CICD == 'true' && success() && github.ref == 'refs/heads/main' && vars.DEPLOY_DEV == 'true' }}
        shell: bash
        working-directory: frontend/kubernetes
        run: |
          # Set frontend version
          docker_image_tags=(${{ steps.build-and-push-docker-image-to-github.outputs.docker-image-tags }})
          docker_image_sha_tag="${docker_image_tags[1]}"
          yq -i ".spec.template.spec.containers[0].image = \"$docker_image_sha_tag\"" core-engine-frontend.stateful.yml

      - name: Deploy Frontend on the Kubernetes cluster
        if: ${{ vars.RUN_CICD == 'true' && success() && github.ref == 'refs/heads/main' && vars.DEPLOY_DEV == 'true' }}
        uses: swiss-ai-center/common-code/.github/actions/execute-command-on-kubernetes-cluster@main
        with:
          kube-config: ${{ env.DEV_KUBE_CONFIG }}
          kube-namespace: ${{ env.DEV_NAMESPACE }}
          kubectl-context: ./frontend/kubernetes
          kubectl-args: |
            apply \
              -f core-engine-frontend.stateful.yml \
              -f core-engine-frontend.service.yml \
              -f core-engine-frontend.ingress.yml

  run-workflow-prod:
    runs-on: ubuntu-latest
    if: ${{ vars.RUN_CICD == 'true' }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v3

      - name: Set up Node.js 18
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Build app
        working-directory: frontend
        env:
          REACT_APP_ENGINE_URL: ${{ env.PROD_BACKEND_URL }}
          REACT_APP_ENGINE_WS_URL: ${{ env.PROD_BACKEND_WS_URL }}
          # So it does not treat warnings as errors
          CI: false
        run: npm run build

      - name: Build and push Docker image to GitHub
        id: build-and-push-docker-image-to-github
        if: ${{ vars.RUN_CICD == 'true' && success() && vars.DEPLOY_PROD == 'true' }}
        uses: swiss-ai-center/common-code/.github/actions/build-and-push-docker-image-to-github@main
        with:
          docker-registry-username: ${{ github.actor }}
          docker-registry-password: ${{ secrets.GITHUB_TOKEN }}
          docker-image-name: ${{ github.repository }}-frontend
          docker-image-context: ./frontend

      - name: Prepare configuration files
        if: ${{ vars.RUN_CICD == 'true' && success() && vars.DEPLOY_PROD == 'true' }}
        shell: bash
        working-directory: frontend/kubernetes
        run: |
          # Set frontend version
          docker_image_tags=(${{ steps.build-and-push-docker-image-to-github.outputs.docker-image-tags }})
          docker_image_sha_tag="${docker_image_tags[1]}"
          yq -i ".spec.template.spec.containers[0].image = \"$docker_image_sha_tag\"" core-engine-frontend.stateful.yml

      - name: Deploy Frontend on the Kubernetes cluster
        if: ${{ vars.RUN_CICD == 'true' && success() && github.ref == 'refs/heads/main' && vars.DEPLOY_PROD == 'true' }}
        uses: swiss-ai-center/common-code/.github/actions/execute-command-on-kubernetes-cluster@main
        with:
          kube-config: ${{ env.PROD_KUBE_CONFIG }}
          kube-namespace: ${{ env.PROD_NAMESPACE }}
          kubectl-context: ./frontend/kubernetes
          kubectl-args: |
            apply \
              -f core-engine-frontend.stateful.yml \
              -f core-engine-frontend.service.yml \
              -f core-engine-frontend.ingress.yml
